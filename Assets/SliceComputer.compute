// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeSlice
		
RWStructuredBuffer<float3> _VariableDataBuffer;

Texture2D<float4> _SourceTexture;
SamplerState sampler_SourceTexture;

#define ChainLength 32 

int _Lifespan;
float _Dampener;

[numthreads(128,1,1)]
void ComputeSlice (uint3 id : SV_DispatchThreadID)
{
    uint startingIndex = id.x * ChainLength;
    float2 lastPosition = _VariableDataBuffer[startingIndex].xz;
    float2 newPosition;
    for(uint i = 1; i < ChainLength; i++)
    {
	    float4 sourceTextureSample = _SourceTexture.SampleLevel(sampler_SourceTexture, lastPosition, 0);
        float2 modifier = ((sourceTextureSample.xy - .5) * 2);
        float height = (float)i / ChainLength;
        newPosition = lastPosition + modifier * _Dampener;

        _VariableDataBuffer[startingIndex + i] = float3(newPosition.x, height, newPosition.y);
        lastPosition = newPosition;
    }
}
